#+AUTHOR: Johan PONIN

* vast -- python to elisp transpiler [alpha]

** usage
To setup Vast you first need to clone it with
#+BEGIN_SRC shell
   git clone https://github.com/jnpn/vast.git
   cd vast
#+END_SRC

Now that you have it cloned, Vast can be used either as a REPL, 
#+begin_src shell
   python src/main.py repl
   >>> def f(x): return x + 1 RET
   ;; elisp output
#+end_src

Or Vast can be passed a file to transpile, 

#+BEGIN_SRC shell
python src/main.py load-file "</path/to/file.py>"
#+END_SRC

which will then print out the transpiled code into the terminal as well as write it to
a file with the same filename, but ending in ~.el~.

** tests

#+begin_src shell
   pytest
#+end_src

** todos

| DONE | ternary if                               |                                       |
| DONE | varargs                                  |                                       |
| DONE | multiline repl                           |                                       |
| TODO | implement list, set, map python API      | rely on dash.el as a starting point ? |
| TODO | desugar python idioms into FP            |                                       |
| TODO | isomorphic Visitor from ~FP tree to Lisp |                                       |
| TODO | Add prelude generation                   |                                       |

** details

*** list, set, map

**** list (slice, append, update, pop, ...)
#+begin_src lisp
    (defun list-slice (l &optional beg end ...step?)
      (-drop beg (-take end l)))

    slice   =lisp.  drop beg (take end)
    append  =lisp.  append
    update  =lisp.  nth . rplaca
    pop	   =lisp. cdr
    push	   =lisp. cons
#+end_src lisp

**** set (intersect, union, diff, conjugate-diff)

**** map (put, get, get-default)

*** desugar python idioms into FP (NodeTransformer)

   - Guarantees presence of a strict subset of ast nodes.
   - No more ListComp, SetComp, Aug..., ...

*** ListComp -> Lisp
#+begin_src lisp
  [fun gen...]

  gen* [fst (name iter pred) ...] ->
  (map (lambda (<lisp name>)
          <gen* ...>
       )
   (filter <lisp pred> <lisp iter>))

   gen* [] -> <lisp fun>
#+end_src

*** isomorphic NodeVisitor for FP-ish tree to Lisp
*** add prelude generation

   - bootstrap generic python operation add, not, is, in, ...
   - prepend to emacs lisp generation.

**** Cover all overloadable binary operators (see grammar):
    add, iadd, sub... as generic-<op>

    #+BEGIN_SRC emacs-lisp
      (defun generic-add(a b)
        (cond  ((and (numberp a) (numberp b)) (+ a b))
               ((and (stringp a) (stringp b)) (string-join a b))
               ((and (floatp a) (floatp b)) (+ a b))
               ((and (characterp a) (characterp b)) (string-join a b))
               ((and (consp a) (consp b)) (append a b))
               (t (error "non supported combination" a b))))

      ;;; or transpile a table of monomorphic relations
      '((numberp . +)
        (floatp . +)
        (stringp . string-join)
        (characterp . (lambda (&rest chars)
                        (string-join
                         (mapcar #'char-to-string chars))))
        (consp . append))
    #+END_SRC

    #+BEGIN_SRC python
    def f(a, b):
        return a + b
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (defun f(a b)
      (generic-add a b))
    #+END_SRC
